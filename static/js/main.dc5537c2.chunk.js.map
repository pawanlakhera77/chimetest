{"version":3,"sources":["MyApp.js","App.js","serviceWorker.js","index.js"],"names":["MyApp","meetingManager","useMeetingManager","joinMeeting","a","joinData","meetingInfo","JSON","parse","attendeeInfo","join","start","onClick","App","toggleVideo","useLocalVideo","theme","lightTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4jBA4BeA,EAxBD,WACZ,IAAMC,EAAiBC,cAEjBC,EAAW,uCAAG,4BAAAC,EAAA,4DAIA,02BACC,6NACbC,EAAW,CACfC,YAAaC,KAAKC,MAHF,22BAIhBC,aAAcF,KAAKC,MAHF,+NALD,SAYZP,EAAeS,KAAKL,GAZR,uBAeZJ,EAAeU,QAfH,2CAAH,qDAkBjB,OAAO,4BAAQC,QAAST,GAAjB,SCCMU,MAdf,WAAgB,IACNC,EAAgBC,cAAhBD,YACR,OACE,kBAAC,IAAD,CAAeE,MAAOC,KACtB,kBAAC,IAAD,KAEE,kBAAC,EAAD,MACA,kBAAC,IAAD,MACA,4BAAQL,QAASE,GAAjB,mBCRcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc5537c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { useMeetingManager } from 'amazon-chime-sdk-component-library-react';\r\n\r\nconst MyApp = () => {\r\n  const meetingManager = useMeetingManager();\r\n\r\n  const joinMeeting = async () => {\r\n    // Fetch the meeting and attendee data from your server\r\n    //const response = await fetch('/my-server');\r\n    //const data = await response.json();\r\n    var MeetingData = '{ \"Meeting\": { \"MeetingId\": \"6424b447-8d00-4557-aa22-5cab1a885b68\", \"ExternalMeetingId\": null, \"MediaPlacement\": { \"AudioHostUrl\": \"4e81f8fe02859f72036f1b563e1ae4bb.k.m3.as1.app.chime.aws:3478\", \"AudioFallbackUrl\": \"wss://haxrp.m3.as1.app.chime.aws:443/calls/6424b447-8d00-4557-aa22-5cab1a885b68\", \"ScreenDataUrl\": \"wss://bitpw.m3.as1.app.chime.aws:443/v2/screen/6424b447-8d00-4557-aa22-5cab1a885b68\", \"ScreenSharingUrl\": \"wss://bitpw.m3.as1.app.chime.aws:443/v2/screen/6424b447-8d00-4557-aa22-5cab1a885b68\", \"ScreenViewingUrl\": \"wss://bitpw.m3.as1.app.chime.aws:443/ws/connect?passcode=null&viewer_uuid=null&X-BitHub-Call-Id=6424b447-8d00-4557-aa22-5cab1a885b68\", \"SignalingUrl\": \"wss://signal.m3.as1.app.chime.aws/control/6424b447-8d00-4557-aa22-5cab1a885b68\", \"TurnControlUrl\": \"https://ccp.cp.ue1.app.chime.aws/v2/turn_sessions\" }, \"MediaRegion\": \"ap-southeast-1\" } }';\r\n    var AttendeeData = '{ \"Attendee\": { \"ExternalUserId\": \"prabhakar\", \"AttendeeId\": \"5312e15c-4fe6-2d94-9a72-e15b77fd4e33\", \"JoinToken\": \"NTMxMmUxNWMtNGZlNi0yZDk0LTlhNzItZTE1Yjc3ZmQ0ZTMzOmUxYTk5MGJjLWUzNGUtNGMyYy04OTIxLTgyN2VkMWY2ZWJiNg\" } }';\r\n    const joinData = {\r\n      meetingInfo: JSON.parse(MeetingData),\r\n      attendeeInfo: JSON.parse(AttendeeData)\r\n    };\r\n\r\n    // Use the join API to create a meeting session\r\n    await meetingManager.join(joinData);\r\n\r\n    // At this point you can let users setup their devices, or start the session immediately\r\n    await meetingManager.start();\r\n  };\r\n\r\n  return <button onClick={joinMeeting}>Join</button>;\r\n};\r\n\r\nexport default MyApp;","import React from 'react';\nimport './App.css';\nimport { ThemeProvider } from 'styled-components';\nimport MyApp from './MyApp.js';\nimport {\n  MeetingProvider,\n  lightTheme,\n  RemoteVideo,\n  LocalVideo,\n  useLocalVideo\n} from 'amazon-chime-sdk-component-library-react';\n\nfunction App() {\n  const { toggleVideo } = useLocalVideo();\n  return (\n    <ThemeProvider theme={lightTheme}>\n    <MeetingProvider>\n\n      <MyApp />\n      <LocalVideo />\n      <button onClick={toggleVideo}>Toggle video</button>\n    </MeetingProvider>\n  </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}